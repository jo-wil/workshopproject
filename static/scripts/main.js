// Generated by CoffeeScript 1.9.1
var Config, Listeners, UI, Worksheet, main;

Config = {
  topics141: [
    {
      'text': 'Not Selected',
      'value': '0'
    }, {
      'text': 'Limits',
      'value': 'limits'
    }, {
      'text': 'Derivatives',
      'value': 'derivatives'
    }, {
      'text': 'Integrals',
      'value': 'integrals'
    }
  ]
};

UI = (function() {
  function UI() {
    this.addListeners();
  }

  UI.prototype.addListeners = function() {
    var Listen;
    console.log("Adding listeners");
    Listen = new Listeners();
    document.getElementById('class-select').addEventListener('change', Listen.classSelectListener);
    document.getElementById('search-button').addEventListener('click', Listen.searchButtonListener);
  };

  return UI;

})();

Listeners = (function() {
  function Listeners() {
    this.worksheet = window.worksheet;
  }

  Listeners.prototype.classSelectListener = function() {
    var i, len, o, option, options, topicSelect;
    topicSelect = document.getElementById('topic-select');
    topicSelect.innerHTML = '';
    switch (this.value) {
      case '141':
        options = Config.topics141;
        for (i = 0, len = options.length; i < len; i++) {
          o = options[i];
          option = document.createElement('option');
          option.setAttribute('value', o.value);
          option.innerHTML = o.text;
          topicSelect.appendChild(option);
        }
        break;
      default:
        option = document.createElement('option');
        option.setAttribute('value', 0);
        option.innerHTML = 'Not Selected';
        topicSelect.appendChild(option);
    }
  };

  Listeners.prototype.searchButtonListener = function() {
    var className, topic, xmlhttp;
    className = document.getElementById('class-select').value;
    topic = document.getElementById('topic-select').value;
    xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", "/database?class_name=" + className + '&topic=' + topic, true);
    xmlhttp.send();
    xmlhttp.onreadystatechange = function() {
      var Listen, addButton, i, index, len, problem, problemDiv, result, resultCount, resultDiv, resultList, results;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        resultList = JSON.parse(xmlhttp.responseText);
        resultDiv = document.getElementById('result-div');
        resultDiv.innerHTML = '';
        resultCount = document.createElement('p');
        resultCount.innerHTML = 'Search returned ' + resultList.length + ' problems.';
        resultDiv.appendChild(resultCount);
        Listen = new Listeners();
        results = [];
        for (index = i = 0, len = resultList.length; i < len; index = ++i) {
          result = resultList[index];
          problemDiv = document.createElement('div');
          problemDiv.classList.add('padding');
          problem = document.createElement('span');
          addButton = document.createElement('button');
          problem.innerHTML = result.problem;
          addButton.innerHTML = 'Add';
          problem.setAttribute('id', 'problem' + index);
          problem.setAttribute('problem', result.problem);
          problem.setAttribute('solution', result.solution);
          problem.classList.add('padding');
          addButton.setAttribute('id', 'add' + index);
          addButton.setAttribute('problemNum', index);
          addButton.classList.add('add-button');
          addButton.classList.add('pure-button');
          addButton.classList.add('button-success');
          problemDiv.appendChild(problem);
          problemDiv.appendChild(addButton);
          resultDiv.appendChild(problemDiv);
          results.push(document.getElementById('add' + index).addEventListener('click', Listen.addButtonListener));
        }
        return results;
      }
    };
  };

  Listeners.prototype.addButtonListener = function() {
    var problem, solution;
    problem = document.getElementById('problem' + this.getAttribute('problemNum')).getAttribute('problem');
    solution = document.getElementById('problem' + this.getAttribute('problemNum')).getAttribute('solution');
    worksheet.addProblem(problem, solution);
    console.log(problem);
    console.log(solution);
  };

  return Listeners;

})();

Worksheet = (function() {
  function Worksheet() {
    this.problems = [];
    this.defaultContent = "\\documentclass{article}\n\\title{Worksheet}\n\\author{SWM}\n\\begin{document}\n\\maketitle\n\n%problems\n\\end{document}";
    this.content = this.defaultContent;
    this.update();
  }

  Worksheet.prototype.addProblem = function(problem, solution) {
    var i, len, p, problemString, ref, space;
    this.problems.push({
      'problem': problem,
      'solution': solution
    });
    this.content = this.defaultContent;
    problemString = '%problems\n';
    space = '\\vspace{5mm}\n\n';
    ref = this.problems;
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      problem = p.problem + '\n\n';
      solution = p.solution + '\n\n';
      this.content = this.content.replace(problemString, problem + solution + space + problemString);
    }
    this.update();
  };

  Worksheet.prototype.update = function() {
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
    xmlhttp.open('POST', '/worksheet', true);
    xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xmlhttp.send('worksheet=' + this.content);
    xmlhttp.onreadystatechange = function() {
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        document.getElementById('preview-iframe').contentWindow.location.reload();
      }
    };
  };

  return Worksheet;

})();

main = function() {
  UI = new UI();
  return window.worksheet = new Worksheet();
};

window.addEventListener('load', main);
